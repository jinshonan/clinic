"use client"  // this is code...

import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { z } from "zod"
import { Button } from "@/components/ui/button"
import { Form, FormControl } from "@/components/ui/form"
import CustomFormField from "@/components/CustomFormField"
import SubmitButton from "../SubmitButton"
import { useState } from "react"
import { PatientFormValidation, UserFormValidation } from "@/lib/validation"
import { useRouter } from "next/navigation"
import { registerPatient } from "@/lib/actions/client.actions"
import { FormFieldType } from "./PatientForm"
import { RadioGroup, RadioGroupItem } from "../ui/radio-group"
import { Doctors, GenderOptions, IdentificationTypes, PatientFormDefaultValues } from "@/constants"
import { Label } from "../ui/label"
import { SelectItem } from "../ui/select"
import Image from "next/image"
import { FileUploader } from "../FileUploader";


const formSchema = z.object({
  username: z.string().min(2, {
    message: "Username must be at least 2 characters.",
  }),
})

const RegisterForm = ({ user }: {user: User}) => {
    const router = useRouter();
    const [isLoading, setIsLoading] = useState(false);

  // 1. Define your form.
  const form = useForm<z.infer<typeof PatientFormValidation>>({
    resolver: zodResolver(PatientFormValidation),
    defaultValues: {
      ...PatientFormDefaultValues,
      name: "",
      email: "",
      phone: "",
    },
  })

    const onSubmit = async (values: z.infer<typeof PatientFormValidation>) => {
    setIsLoading(true);

    // Store file info in form data as
    let formData;
    if (
      values.identificationDocument &&
      values.identificationDocument?.length > 0
    ) {
      const blobFile = new Blob([values.identificationDocument[0]], {
        type: values.identificationDocument[0].type,
      });

      formData = new FormData();
      formData.append("blobFile", blobFile);
      formData.append("fileName", values.identificationDocument[0].name);
    }

    try {  // for App write to receive the data
      const patientData = {
        ...values,
        userId: user.$id,
        birthDate: new Date(values.birthDate),
        name: values.name,
        email: values.email,
        phone: values.phone,
        identificationDocument: formData,
      };


      const newPatient = await registerPatient(patientData);  

      // debug
      // console.log('newPatient:', newPatient);
      // console.log('Type:', typeof newPatient);
      // console.log('Truthy?', !!newPatient);

      if (newPatient) {
        router.push(`/patients/${user.$id}/new-appointment`);
      }
    } catch (error) {
      console.log(error);
    }

    setIsLoading(false);
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-12 flex-1">
        <section className="space-y-4">
            <h1 className="header">üêº „ÅØ„Åò„ÇÅ„Åæ„Åó„Å¶</h1>
            <p className="text-dark-700">„ÅîË®òÂÖ•„Åè„Å†„Åï„ÅÑÔºÅ</p>
        </section>

        <section className="space-y-6">
          <div className="mb-9 space-y-1">
            <h2 className="sub-header">ÂÄã‰∫∫ÊÉÖÂ†±</h2>

            </div>

            <CustomFormField
              fieldType={FormFieldType.INPUT}
              control={form.control}
              name="name"
              label="ÂêçÂâç"
              placeholder="Ê°êÁîü‰∏ÄÈ¶¨"
              iconSrc="/assets/icons/user.svg"
              iconAlt="user"
            />

        <div className="flex flex-col gap-6 xl:flex-row">
            <CustomFormField
              fieldType={FormFieldType.INPUT}
              control={form.control}
              name="email"
              label="E„É°„Éº„É´"
              placeholder="yakuza@gmail.com"
              iconSrc="/assets/icons/email.svg"
              iconAlt="email"
            />

            <CustomFormField
                fieldType={FormFieldType.PHONE_INPUT}
                control={form.control}
                name="phone"
                label="ÈõªË©±Áï™Âè∑"
                placeholder="8088888888"
            />
       </div>

          <div className="flex flex-col gap-6 xl:flex-row">
            <CustomFormField
                fieldType={FormFieldType.DATE_PICKER}
                control={form.control}
                name="birthDate"
                label="ÁîüÂπ¥ÊúàÊó•"
            />

            <CustomFormField
                fieldType={FormFieldType.SKELETON}
                control={form.control}
                name="gender"
                label="ÊÄßÂà•"
                renderSkeleton={(field) => (
                  <FormControl>
                    <RadioGroup className="flex h-11 gap-6 xl:justify-between"
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                    >
                      {GenderOptions.map((option, i) => (
                        <div key={option + i} className="radio-group">
                          <RadioGroupItem value={option} id={option} />
                          <Label htmlFor={option} className="cursor-pointer">
                            {option}
                          </Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                )}
              />
          </div>

          <div className="flex flex-col gap-6 xl:flex-row">
              <CustomFormField
                fieldType={FormFieldType.INPUT}
                control={form.control}
                name="address"
                label="‰ΩèÊâÄ"
                placeholder="Êñ∞ÂÆøÂå∫Á•ûÂÆ§Áî∫"
              />

              <CustomFormField
                fieldType={FormFieldType.INPUT}
                control={form.control}
                name="occupation"
                label="ËÅ∑Ê•≠"
                placeholder="„Ç®„É≥„Ç∏„Éã„Ç¢"
              />
          </div>

          <div className="flex flex-col gap-6 xl:flex-row">
              <CustomFormField
                fieldType={FormFieldType.INPUT}
                control={form.control}
                name="emergencyContactName"
                label="Á∑äÊÄ•ÈÄ£Áµ°ÂÖà"
                placeholder="„ÅäÂêçÂâç"
              />

              <CustomFormField
                fieldType={FormFieldType.PHONE_INPUT}
                control={form.control}
                name="emergencyContactNumber"
                label="Á∑äÊÄ•ÈÄ£Áµ°ÂÖà"
                placeholder="ÈõªË©±Áï™Âè∑"
              />
          </div>
        </section>

        {/* causing issues so disabling them */}
        <section className="space-y-6">
          <div className="mb-9 space-y-1">
            <h2 className="sub-header">„Ç´„É´„ÉÜ</h2>
          </div>

          <CustomFormField
            fieldType={FormFieldType.SELECT}
            control={form.control}
            name="primaryPhysician"
            label="‰∏ÄÊ¨°Ë®∫ÁôÇÂåª"
            placeholder="ÂåªÂ∏´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
          >
              {Doctors.map((doctor) => (
                <SelectItem key={doctor.name} value={doctor.name}>
                  <div className="flex cursor-pointer items-center gap-2">
                    <Image
                      src={doctor.image}
                      width={32}
                      height={32}
                      alt="doctor"
                      className="rounded-full 
                      border border-dark-500"
                    />
                    <p>{doctor.name}</p>
                  </div>
                </SelectItem>
              ))}
          </CustomFormField>

          <div className="flex flex-col gap-6 xl:flex-row">
              <CustomFormField
                fieldType={FormFieldType.INPUT}
                control={form.control}
                name="insuranceProvider"
                label="ÂõΩÊ∞ëÂÅ•Â∫∑‰øùÈô∫"
                placeholder="‰ΩøÁî®„Åô„Çã"
              />

              <CustomFormField
                fieldType={FormFieldType.INPUT}
                control={form.control}
                name="insurancePolicyNumber"
                label="„Éû„Ç§„Éä„É≥„Éê„Éº"
                placeholder="ABC123456789"
              />
          </div>

          <div className="flex flex-col gap-6 xl:flex-row">
              <CustomFormField
                fieldType={FormFieldType.TEXTAREA}
                control={form.control}
                name="allergies"
                label="„Ç¢„É¨„É´„ÇÆ„Éº"
                placeholder="Ëä±Á≤â"
              />

              <CustomFormField
                fieldType={FormFieldType.TEXTAREA}
                control={form.control}
                name="currentMedication"
                label="ÊúçÁî®„Åó„ÅüËñ¨"
                placeholder="„Éì„Çø„Éü„É≥C 50mg"
              />
          </div>

          <div className="flex flex-col gap-6 xl:flex-row">
              <CustomFormField
                fieldType={FormFieldType.TEXTAREA}
                control={form.control}
                name="familyMedicalHistory"
                label="ÂÆ∂Êóè„ÅÆÁóÖÊ≠¥"
                placeholder="„Å™„Åó"
              />

              <CustomFormField
                fieldType={FormFieldType.TEXTAREA}
                control={form.control}
                name="pastMedicalHistory"
                label="ÈÅéÂéª„ÅÆÁóÖÊ≠¥"
                placeholder="„Å™„Åó"
              />
          </div>
        </section>

        <section className="space-y-6">
          <div className="mb-9 space-y-1">
            <h2 className="sub-header">Êú¨‰∫∫Á¢∫Ë™ç</h2>
          </div>

          <CustomFormField
            fieldType={FormFieldType.SELECT}
            control={form.control}
            name="identificationType"
            label="Ë∫´ÂàÜË®ºÊòéÊõ∏"
            placeholder="Ê§úË®ºÊñπÊ≥ï"
          >
            {IdentificationTypes.map((type, i) => (
              <SelectItem key={type + i} value={type}>
                {type}
              </SelectItem>
            ))}
          </CustomFormField>

          <CustomFormField
            fieldType={FormFieldType.INPUT}
            control={form.control}
            name="identificationNumber"
            label="Ë∫´ÂàÜË®ºÊòéË®ºÁï™Âè∑"
            placeholder="123456789"
          />

          <CustomFormField
            fieldType={FormFieldType.SKELETON}
            control={form.control}
            name="identificationDocument"
            label="Ë∫´ÂàÜË®ºÊòéÊõ∏„ÅÆ„Çπ„Ç≠„É£„É≥„Ç≥„Éî„Éº"
            renderSkeleton={(field) => (
              <FormControl>
                <FileUploader files={field.value} onChange={field.onChange} />
              </FormControl>
            )}
        />
        </section>

        <section className="space-y-6">
          <div className="mb-9 space-y-1">
            <h2 className="sub-header">ÂÄã‰∫∫ÊÉÖÂ†±‰øùË≠∑ÊñπÈáù</h2>
          </div>

          <CustomFormField
            fieldType={FormFieldType.CHECKBOX}
            control={form.control}
            name="treatmentConsent"
            label="Ê≤ªÁôÇ„ÇíÂèó„Åë„Çã„Åì„Å®„Å´ÂêåÊÑè„Åó„Åæ„Åô„ÄÇ"
          />

          <CustomFormField
            fieldType={FormFieldType.CHECKBOX}
            control={form.control}
            name="disclosureConsent"
            label="Ê≤ªÁôÇÁõÆÁöÑ„ÅßÁßÅ„ÅÆÂÅ•Â∫∑ÊÉÖÂ†±„ÅÆ‰ΩøÁî®„Åä„Çà„Å≥ÈñãÁ§∫„Å´ÂêåÊÑè„Åó„Åæ„Åô„ÄÇ"
          />

          <CustomFormField
            fieldType={FormFieldType.CHECKBOX}
            control={form.control}
            name="privacyConsent"
            label="„Éó„É©„Ç§„Éê„Ç∑„Éº„Éù„É™„Ç∑„Éº„ÇíÁ¢∫Ë™ç„Åó„ÄÅÂêåÊÑè„Åó„Åæ„Åô„ÄÇ"
          />
        </section>

        <SubmitButton isLoading={isLoading}>Á¢∫Ë™ç„Åô„Çã</SubmitButton>
      </form>
    </Form>
  )
}

export default RegisterForm